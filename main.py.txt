#!/usr/bin/env python3
"""
Live Gender Detection Application
Real-time gender classification using OpenCV and TensorFlow Lite

This application captures video from your webcam, detects faces in real-time,
and predicts gender using a TensorFlow Lite model for optimal performance.

Author: AI Assistant
Requirements: OpenCV, TensorFlow, NumPy
"""

import cv2
import numpy as np
import time
import argparse
import sys
from pathlib import Path

# Import our custom modules
from utils.face_detector import FaceDetector
from utils.gender_classifier import GenderClassifier
from utils.video_processor import VideoProcessor
from utils.performance_monitor import PerformanceMonitor

class GenderDetectionApp:
    """
    Main application class for live gender detection.
    
    This class orchestrates the entire pipeline:
    1. Camera initialization
    2. Face detection
    3. Gender classification
    4. Display and user interaction
    """
    
    def __init__(self, model_path="models/gender_model.tflite", confidence_threshold=0.5):
        """
        Initialize the gender detection application.
        
        Args:
            model_path (str): Path to the TensorFlow Lite model file
            confidence_threshold (float): Minimum confidence for face detection
        """
        print("üöÄ Initializing Gender Detection App...")
        
        # Initialize components
        self.face_detector = FaceDetector(confidence_threshold=confidence_threshold)
        self.gender_classifier = GenderClassifier(model_path)
        self.video_processor = VideoProcessor()
        self.performance_monitor = PerformanceMonitor()
        
        # Application state
        self.is_running = False
        self.cap = None
        
        print("‚úÖ App initialization complete!")
    
    def initialize_camera(self, camera_index=0):
        """
        Initialize the camera for video capture.
        
        Args:
            camera_index (int): Camera device index (usually 0 for built-in camera)
            
        Returns:
            bool: True if camera initialized successfully, False otherwise
        """
        try:
            print(f"üì∑ Attempting to access camera {camera_index}...")
            self.cap = cv2.VideoCapture(camera_index)
            
            if not self.cap.isOpened():
                print(f"‚ùå Error: Cannot access camera {camera_index}")
                return False
            
            # Set camera properties for better performance
            self.cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
            self.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
            self.cap.set(cv2.CAP_PROP_FPS, 30)
            
            # Test camera by reading one frame
            ret, frame = self.cap.read()
            if not ret:
                print("‚ùå Error: Cannot read from camera")
                return False
            
            print(f"‚úÖ Camera initialized successfully!")
            print(f"   Resolution: {int(self.cap.get(cv2.CAP_PROP_FRAME_WIDTH))}x{int(self.cap.get(cv2.CAP_PROP_FRAME_HEIGHT))}")
            print(f"   FPS: {int(self.cap.get(cv2.CAP_PROP_FPS))}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Camera initialization error: {e}")
            return False
    
    def process_frame(self, frame):
        """
        Process a single frame for face detection and gender classification.
        
        Args:
            frame (numpy.ndarray): Input frame from camera
            
        Returns:
            numpy.ndarray: Processed frame with annotations
        """
        # Detect faces in the frame
        faces = self.face_detector.detect_faces(frame)
        
        # Process each detected face
        for (x, y, w, h) in faces:
            # Extract face region
            face_roi = frame[y:y+h, x:x+w]
            
            # Classify gender for this face
            gender, confidence = self.gender_classifier.predict_gender(face_roi)
            
            # Draw bounding box around face
            color = (0, 255, 0) if gender == "Female" else (255, 0, 0)
            cv2.rectangle(frame, (x, y), (x + w, y + h), color, 2)
            
            # Create label with gender and confidence
            label = f"{gender}: {confidence:.1f}%"
            
            # Calculate text size for background rectangle
            (text_width, text_height), baseline = cv2.getTextSize(
                label, cv2.FONT_HERSHEY_SIMPLEX, 0.7, 2
            )
            
            # Draw background rectangle for text
            cv2.rectangle(
                frame,
                (x, y - text_height - 10),
                (x + text_width, y),
                color,
                -1
            )
            
            # Draw text label
            cv2.putText(
                frame,
                label,
                (x, y - 5),
                cv2.FONT_HERSHEY_SIMPLEX,
                0.7,
                (255, 255, 255),
                2
            )
        
        return frame
    
    def run(self, camera_index=0):
        """
        Main application loop for real-time gender detection.
        
        Args:
            camera_index (int): Camera device index
        """
        # Initialize camera
        if not self.initialize_camera(camera_index):
            print("‚ùå Failed to initialize camera. Please check your camera connection.")
            return
        
        self.is_running = True
        print("\nüé• Starting live gender detection...")
        print("üìã Instructions:")
        print("   - Press 'q' to quit")
        print("   - Press 's' to save current frame")
        print("   - Press 'f' to toggle fullscreen")
        print("\n")
        
        # Create window
        cv2.namedWindow('Live Gender Detection', cv2.WINDOW_RESIZABLE)
        
        try:
            while self.is_running:
                # Start frame timing
                self.performance_monitor.start_frame()
                
                # Capture frame
                ret, frame = self.cap.read()
                if not ret:
                    print("‚ùå Error: Cannot read frame from camera")
                    break
                
                # Flip frame horizontally for mirror effect
                frame = cv2.flip(frame, 1)
                
                # Process frame for gender detection
                processed_frame = self.process_frame(frame)
                
                # Add performance information
                processed_frame = self.performance_monitor.add_fps_to_frame(processed_frame)
                
                # Add instructions to frame
                self.video_processor.add_instructions(processed_frame)
                
                # Display the frame
                cv2.imshow('Live Gender Detection', processed_frame)
                
                # Handle keyboard input
                key = cv2.waitKey(1) & 0xFF
                if key == ord('q'):
                    print("üëã Quitting application...")
                    break
                elif key == ord('s'):
                    self.video_processor.save_frame(processed_frame)
                elif key == ord('f'):
                    self.video_processor.toggle_fullscreen()
                
                # Update performance metrics
                self.performance_monitor.end_frame()
        
        except KeyboardInterrupt:
            print("\n‚ö†Ô∏è Application interrupted by user")
        
        except Exception as e:
            print(f"‚ùå Unexpected error: {e}")
        
        finally:
            self.cleanup()
    
    def cleanup(self):
        """Clean up resources before exiting."""
        print("üßπ Cleaning up resources...")
        
        if self.cap:
            self.cap.release()
        
        cv2.destroyAllWindows()
        
        # Print final performance statistics
        self.performance_monitor.print_statistics()
        
        print("‚úÖ Cleanup complete. Goodbye!")

def main():
    """Main entry point of the application."""
    parser = argparse.ArgumentParser(description='Live Gender Detection Application')
    parser.add_argument('--model', type=str, default='models/gender_model.tflite',
                      help='Path to TensorFlow Lite model file')
    parser.add_argument('--camera', type=int, default=0,
                      help='Camera index (default: 0)')
    parser.add_argument('--confidence', type=float, default=0.5,
                      help='Face detection confidence threshold (default: 0.5)')
    
    args = parser.parse_args()
    
    # Check if model file exists
    model_path = Path(args.model)
    if not model_path.exists():
        print(f"‚ùå Model file not found: {args.model}")
        print("üìñ Please follow the setup instructions in README.md to download the model.")
        sys.exit(1)
    
    # Create and run the application
    app = GenderDetectionApp(
        model_path=args.model,
        confidence_threshold=args.confidence
    )
    
    try:
        app.run(camera_index=args.camera)
    except Exception as e:
        print(f"‚ùå Fatal error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()